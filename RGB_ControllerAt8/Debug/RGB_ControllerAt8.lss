
RGB_ControllerAt8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000518  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  00800070  00800070  000005bc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00000d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ed  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030f  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fd  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  000020ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000281  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cb  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	28 c0       	rjmp	.+80     	; 0x5e <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	8f c1       	rjmp	.+798    	; 0x336 <__vector_11>
  18:	bb c1       	rjmp	.+886    	; 0x390 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e1       	ldi	r30, 0x18	; 24
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e7       	ldi	r26, 0x70	; 112
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 3e       	cpi	r26, 0xE0	; 224
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	78 d0       	rcall	.+240    	; 0x14a <main>
  5a:	5c c2       	rjmp	.+1208   	; 0x514 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_6>:
volatile char inputbuff[40];
volatile int freq = 0;


ISR(TIMER1_COMPA_vect) 
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
  6a:	9f 93       	push	r25
	static uint8_t cnt = 0; 
	cnt++;
  6c:	80 91 72 00 	lds	r24, 0x0072
  70:	8f 5f       	subi	r24, 0xFF	; 255
  72:	80 93 72 00 	sts	0x0072, r24
	if (pwm_GREEN > cnt) 
  76:	90 91 6f 00 	lds	r25, 0x006F
  7a:	89 17       	cp	r24, r25
  7c:	10 f4       	brcc	.+4      	; 0x82 <__vector_6+0x24>
		LED_PORT |= GREEN; 
  7e:	aa 9a       	sbi	0x15, 2	; 21
  80:	01 c0       	rjmp	.+2      	; 0x84 <__vector_6+0x26>
	else 
		LED_PORT &= ~GREEN; 
  82:	aa 98       	cbi	0x15, 2	; 21
	if (pwm_RED > cnt) 
  84:	90 91 6d 00 	lds	r25, 0x006D
  88:	80 91 72 00 	lds	r24, 0x0072
  8c:	89 17       	cp	r24, r25
  8e:	10 f4       	brcc	.+4      	; 0x94 <__vector_6+0x36>
		LED_PORT |= RED; 
  90:	ac 9a       	sbi	0x15, 4	; 21
  92:	01 c0       	rjmp	.+2      	; 0x96 <__vector_6+0x38>
	else 
		LED_PORT &= ~RED; 
  94:	ac 98       	cbi	0x15, 4	; 21

	if (pwm_BLUE > cnt) 
  96:	90 91 6e 00 	lds	r25, 0x006E
  9a:	80 91 72 00 	lds	r24, 0x0072
  9e:	89 17       	cp	r24, r25
  a0:	10 f4       	brcc	.+4      	; 0xa6 <__vector_6+0x48>
		LED_PORT |= BLUE; 
  a2:	a8 9a       	sbi	0x15, 0	; 21
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <__vector_6+0x4a>
	else 
		LED_PORT &= ~BLUE; 
  a6:	a8 98       	cbi	0x15, 0	; 21
	if (cnt > 255) 
		cnt = 0; 
}  
  a8:	9f 91       	pop	r25
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <CTC1_init>:

void CTC1_init() //inciclalizacja timera1  
{		
	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	8b 60       	ori	r24, 0x0B	; 11
  ba:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;	
  bc:	1d bc       	out	0x2d, r1	; 45
  be:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 7; 
  c0:	87 e0       	ldi	r24, 0x07	; 7
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9b bd       	out	0x2b, r25	; 43
  c6:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);
  c8:	89 b7       	in	r24, 0x39	; 57
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	89 bf       	out	0x39, r24	; 57
}
  ce:	08 95       	ret

000000d0 <checkReceived>:

char checkReceived()
{
	if(inputbuff[0]== 'S' && inputbuff[1]== 'E' && inputbuff[2]== 'T')	
  d0:	80 91 b8 00 	lds	r24, 0x00B8
  d4:	83 35       	cpi	r24, 0x53	; 83
  d6:	39 f5       	brne	.+78     	; 0x126 <checkReceived+0x56>
  d8:	80 91 b9 00 	lds	r24, 0x00B9
  dc:	85 34       	cpi	r24, 0x45	; 69
  de:	29 f5       	brne	.+74     	; 0x12a <checkReceived+0x5a>
  e0:	80 91 ba 00 	lds	r24, 0x00BA
  e4:	84 35       	cpi	r24, 0x54	; 84
  e6:	19 f5       	brne	.+70     	; 0x12e <checkReceived+0x5e>
		if(inputbuff[4]== 'R' && inputbuff[9]== 'G' && inputbuff[14]== 'B'&& inputbuff[19]== 'F')
  e8:	80 91 bc 00 	lds	r24, 0x00BC
  ec:	82 35       	cpi	r24, 0x52	; 82
  ee:	09 f5       	brne	.+66     	; 0x132 <checkReceived+0x62>
  f0:	80 91 c1 00 	lds	r24, 0x00C1
  f4:	87 34       	cpi	r24, 0x47	; 71
  f6:	f9 f4       	brne	.+62     	; 0x136 <checkReceived+0x66>
  f8:	80 91 c6 00 	lds	r24, 0x00C6
  fc:	82 34       	cpi	r24, 0x42	; 66
  fe:	e9 f4       	brne	.+58     	; 0x13a <checkReceived+0x6a>
 100:	80 91 cb 00 	lds	r24, 0x00CB
 104:	86 34       	cpi	r24, 0x46	; 70
 106:	d9 f4       	brne	.+54     	; 0x13e <checkReceived+0x6e>
			if(inputbuff[25]== 'E' && inputbuff[26]== 'N' && inputbuff[27]== 'D')
 108:	80 91 d1 00 	lds	r24, 0x00D1
 10c:	85 34       	cpi	r24, 0x45	; 69
 10e:	c9 f4       	brne	.+50     	; 0x142 <checkReceived+0x72>
 110:	80 91 d2 00 	lds	r24, 0x00D2
 114:	8e 34       	cpi	r24, 0x4E	; 78
 116:	b9 f4       	brne	.+46     	; 0x146 <checkReceived+0x76>
 118:	90 91 d3 00 	lds	r25, 0x00D3
	TCNT1 = 0;	
	OCR1A = 7; 
	TIMSK |= (1 << OCIE1A);
}

char checkReceived()
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	94 34       	cpi	r25, 0x44	; 68
 120:	99 f4       	brne	.+38     	; 0x148 <checkReceived+0x78>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
{
	if(inputbuff[0]== 'S' && inputbuff[1]== 'E' && inputbuff[2]== 'T')	
		if(inputbuff[4]== 'R' && inputbuff[9]== 'G' && inputbuff[14]== 'B'&& inputbuff[19]== 'F')
			if(inputbuff[25]== 'E' && inputbuff[26]== 'N' && inputbuff[27]== 'D')
				return 0;
	return 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	08 95       	ret
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	08 95       	ret
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	81 e0       	ldi	r24, 0x01	; 1
}
 148:	08 95       	ret

0000014a <main>:

int main(void) 
{ 
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	28 97       	sbiw	r28, 0x08	; 8
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
	LED_DDR |= GREEN |BLUE | RED; //ustawiamy piny jako wyjœcia
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	85 61       	ori	r24, 0x15	; 21
 162:	84 bb       	out	0x14, r24	; 20
	LED_PORT &= ~(GREEN | BLUE | RED); //wy³¹czamy na pocz¹tek wyjœcia diody RGB
 164:	85 b3       	in	r24, 0x15	; 21
 166:	8a 7e       	andi	r24, 0xEA	; 234
 168:	85 bb       	out	0x15, r24	; 21
	LED_PORT |= (1<<PC1) | (1<<PC3)  | (1<<PC5); //za³¹czamy pull-upy przy nieu¿ywanych pinach
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8a 62       	ori	r24, 0x2A	; 42
 16e:	85 bb       	out	0x15, r24	; 21
	LED_DDR &= ~((1<<PC1) | (1<<PC3)| (1<<PC5)); //ustawiamy nieu¿ywane piny jako wejœcia
 170:	84 b3       	in	r24, 0x14	; 20
 172:	85 7d       	andi	r24, 0xD5	; 213
 174:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	9f eb       	ldi	r25, 0xBF	; 191
 17a:	a1 e2       	ldi	r26, 0x21	; 33
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	a0 40       	sbci	r26, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x32>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x3c>
 186:	00 00       	nop
	_delay_ms(1000);
		
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	27 d1       	rcall	.+590    	; 0x3dc <uart_init>
	CTC1_init();
 18e:	93 df       	rcall	.-218    	; 0xb6 <CTC1_init>
	sei();
 190:	78 94       	sei
		if(receivedData >= 28)
		{			
			for(int i = 0; i < 28; i++)
			{
				aa = uart_getc();				
				inputbuff[i]= aa & 0xFF;						
 192:	08 eb       	ldi	r16, 0xB8	; 184
 194:	10 e0       	ldi	r17, 0x00	; 0
				pwm_BLUE = (inputbuff[15]-0x30)*100+(inputbuff[16]-0x30)*10+(inputbuff[17]-0x30);
				freq = (inputbuff[20]-0x30)*1000+(inputbuff[21]-0x30)*100+(inputbuff[22]-0x30)*10+(inputbuff[23]-0x30);
				uart_puts("ACK\r\n");
			}
			else
				uart_puts("NACK\r\n");
 196:	0f 2e       	mov	r0, r31
 198:	f6 e6       	ldi	r31, 0x66	; 102
 19a:	cf 2e       	mov	r12, r31
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	df 2e       	mov	r13, r31
 1a0:	f0 2d       	mov	r31, r0
				aa = uart_getc();				
				inputbuff[i]= aa & 0xFF;						
			}						
			if(checkReceived() == 0)
			{
				pwm_RED = (inputbuff[5]-0x30)*100+(inputbuff[6]-0x30)*10+(inputbuff[7]-0x30);
 1a2:	0f 2e       	mov	r0, r31
 1a4:	fd eb       	ldi	r31, 0xBD	; 189
 1a6:	ef 2e       	mov	r14, r31
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ff 2e       	mov	r15, r31
 1ac:	f0 2d       	mov	r31, r0
 1ae:	57 01       	movw	r10, r14
 1b0:	08 94       	sec
 1b2:	a1 1c       	adc	r10, r1
 1b4:	b1 1c       	adc	r11, r1
 1b6:	88 24       	eor	r8, r8
 1b8:	99 24       	eor	r9, r9
 1ba:	68 94       	set
 1bc:	81 f8       	bld	r8, 1
 1be:	8e 0c       	add	r8, r14
 1c0:	9f 1c       	adc	r9, r15
				pwm_GREEN = (inputbuff[10]-0x30)*100+(inputbuff[11]-0x30)*10+(inputbuff[12]-0x30);
 1c2:	0f 2e       	mov	r0, r31
 1c4:	f5 e0       	ldi	r31, 0x05	; 5
 1c6:	6f 2e       	mov	r6, r31
 1c8:	77 24       	eor	r7, r7
 1ca:	f0 2d       	mov	r31, r0
 1cc:	6e 0c       	add	r6, r14
 1ce:	7f 1c       	adc	r7, r15
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f6 e0       	ldi	r31, 0x06	; 6
 1d4:	4f 2e       	mov	r4, r31
 1d6:	55 24       	eor	r5, r5
 1d8:	f0 2d       	mov	r31, r0
 1da:	4e 0c       	add	r4, r14
 1dc:	5f 1c       	adc	r5, r15
 1de:	0f 2e       	mov	r0, r31
 1e0:	f7 e0       	ldi	r31, 0x07	; 7
 1e2:	2f 2e       	mov	r2, r31
 1e4:	33 24       	eor	r3, r3
 1e6:	f0 2d       	mov	r31, r0
 1e8:	2e 0c       	add	r2, r14
 1ea:	3f 1c       	adc	r3, r15
				pwm_BLUE = (inputbuff[15]-0x30)*100+(inputbuff[16]-0x30)*10+(inputbuff[17]-0x30);
 1ec:	d7 01       	movw	r26, r14
 1ee:	1a 96       	adiw	r26, 0x0a	; 10
 1f0:	ba 83       	std	Y+2, r27	; 0x02
 1f2:	a9 83       	std	Y+1, r26	; 0x01
 1f4:	f7 01       	movw	r30, r14
 1f6:	3b 96       	adiw	r30, 0x0b	; 11
 1f8:	fc 83       	std	Y+4, r31	; 0x04
 1fa:	eb 83       	std	Y+3, r30	; 0x03
 1fc:	c7 01       	movw	r24, r14
 1fe:	0c 96       	adiw	r24, 0x0c	; 12
 200:	9e 83       	std	Y+6, r25	; 0x06
 202:	8d 83       	std	Y+5, r24	; 0x05
	sei();
	int receivedData, aa=0;	
	char out = 0;	
	while(1) 
	{    
		receivedData = uart_available();	
 204:	4a d1       	rcall	.+660    	; 0x49a <uart_available>
		if(receivedData >= 28)
 206:	8c 31       	cpi	r24, 0x1C	; 28
 208:	91 05       	cpc	r25, r1
 20a:	e4 f3       	brlt	.-8      	; 0x204 <main+0xba>
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	b8 87       	std	Y+8, r27	; 0x08
 212:	af 83       	std	Y+7, r26	; 0x07
		{			
			for(int i = 0; i < 28; i++)
			{
				aa = uart_getc();				
 214:	f7 d0       	rcall	.+494    	; 0x404 <uart_getc>
				inputbuff[i]= aa & 0xFF;						
 216:	ef 81       	ldd	r30, Y+7	; 0x07
 218:	f8 85       	ldd	r31, Y+8	; 0x08
 21a:	e0 0f       	add	r30, r16
 21c:	f1 1f       	adc	r31, r17
 21e:	80 83       	st	Z, r24
	while(1) 
	{    
		receivedData = uart_available();	
		if(receivedData >= 28)
		{			
			for(int i = 0; i < 28; i++)
 220:	ef 81       	ldd	r30, Y+7	; 0x07
 222:	f8 85       	ldd	r31, Y+8	; 0x08
 224:	31 96       	adiw	r30, 0x01	; 1
 226:	f8 87       	std	Y+8, r31	; 0x08
 228:	ef 83       	std	Y+7, r30	; 0x07
 22a:	ec 31       	cpi	r30, 0x1C	; 28
 22c:	f1 05       	cpc	r31, r1
 22e:	91 f7       	brne	.-28     	; 0x214 <main+0xca>
			{
				aa = uart_getc();				
				inputbuff[i]= aa & 0xFF;						
			}						
			if(checkReceived() == 0)
 230:	4f df       	rcall	.-354    	; 0xd0 <checkReceived>
 232:	88 23       	and	r24, r24
 234:	09 f0       	breq	.+2      	; 0x238 <main+0xee>
 236:	7b c0       	rjmp	.+246    	; 0x32e <main+0x1e4>
			{
				pwm_RED = (inputbuff[5]-0x30)*100+(inputbuff[6]-0x30)*10+(inputbuff[7]-0x30);
 238:	d7 01       	movw	r26, r14
 23a:	9c 91       	ld	r25, X
 23c:	f5 01       	movw	r30, r10
 23e:	40 81       	ld	r20, Z
 240:	d4 01       	movw	r26, r8
 242:	8c 91       	ld	r24, X
 244:	38 2f       	mov	r19, r24
 246:	30 5d       	subi	r19, 0xD0	; 208
 248:	24 e6       	ldi	r18, 0x64	; 100
 24a:	92 9f       	mul	r25, r18
 24c:	80 2d       	mov	r24, r0
 24e:	11 24       	eor	r1, r1
 250:	38 0f       	add	r19, r24
 252:	84 2f       	mov	r24, r20
 254:	88 0f       	add	r24, r24
 256:	98 2f       	mov	r25, r24
 258:	99 0f       	add	r25, r25
 25a:	99 0f       	add	r25, r25
 25c:	89 0f       	add	r24, r25
 25e:	83 0f       	add	r24, r19
 260:	80 93 6d 00 	sts	0x006D, r24
				pwm_GREEN = (inputbuff[10]-0x30)*100+(inputbuff[11]-0x30)*10+(inputbuff[12]-0x30);
 264:	f3 01       	movw	r30, r6
 266:	90 81       	ld	r25, Z
 268:	d2 01       	movw	r26, r4
 26a:	4c 91       	ld	r20, X
 26c:	f1 01       	movw	r30, r2
 26e:	80 81       	ld	r24, Z
 270:	38 2f       	mov	r19, r24
 272:	30 5d       	subi	r19, 0xD0	; 208
 274:	92 9f       	mul	r25, r18
 276:	80 2d       	mov	r24, r0
 278:	11 24       	eor	r1, r1
 27a:	38 0f       	add	r19, r24
 27c:	84 2f       	mov	r24, r20
 27e:	88 0f       	add	r24, r24
 280:	98 2f       	mov	r25, r24
 282:	99 0f       	add	r25, r25
 284:	99 0f       	add	r25, r25
 286:	89 0f       	add	r24, r25
 288:	83 0f       	add	r24, r19
 28a:	80 93 6f 00 	sts	0x006F, r24
				pwm_BLUE = (inputbuff[15]-0x30)*100+(inputbuff[16]-0x30)*10+(inputbuff[17]-0x30);
 28e:	a9 81       	ldd	r26, Y+1	; 0x01
 290:	ba 81       	ldd	r27, Y+2	; 0x02
 292:	9c 91       	ld	r25, X
 294:	eb 81       	ldd	r30, Y+3	; 0x03
 296:	fc 81       	ldd	r31, Y+4	; 0x04
 298:	40 81       	ld	r20, Z
 29a:	ad 81       	ldd	r26, Y+5	; 0x05
 29c:	be 81       	ldd	r27, Y+6	; 0x06
 29e:	8c 91       	ld	r24, X
 2a0:	38 2f       	mov	r19, r24
 2a2:	30 5d       	subi	r19, 0xD0	; 208
 2a4:	92 9f       	mul	r25, r18
 2a6:	80 2d       	mov	r24, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	38 0f       	add	r19, r24
 2ac:	84 2f       	mov	r24, r20
 2ae:	88 0f       	add	r24, r24
 2b0:	98 2f       	mov	r25, r24
 2b2:	99 0f       	add	r25, r25
 2b4:	99 0f       	add	r25, r25
 2b6:	89 0f       	add	r24, r25
 2b8:	83 0f       	add	r24, r19
 2ba:	80 93 6e 00 	sts	0x006E, r24
				freq = (inputbuff[20]-0x30)*1000+(inputbuff[21]-0x30)*100+(inputbuff[22]-0x30)*10+(inputbuff[23]-0x30);
 2be:	f7 01       	movw	r30, r14
 2c0:	80 89       	ldd	r24, Z+16	; 0x10
 2c2:	47 85       	ldd	r20, Z+15	; 0x0f
 2c4:	e1 89       	ldd	r30, Z+17	; 0x11
 2c6:	d7 01       	movw	r26, r14
 2c8:	52 96       	adiw	r26, 0x12	; 18
 2ca:	fc 91       	ld	r31, X
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	24 e6       	ldi	r18, 0x64	; 100
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	82 9f       	mul	r24, r18
 2d4:	b0 01       	movw	r22, r0
 2d6:	83 9f       	mul	r24, r19
 2d8:	70 0d       	add	r23, r0
 2da:	92 9f       	mul	r25, r18
 2dc:	70 0d       	add	r23, r0
 2de:	11 24       	eor	r1, r1
 2e0:	84 2f       	mov	r24, r20
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	c0 97       	sbiw	r24, 0x30	; 48
 2e6:	28 ee       	ldi	r18, 0xE8	; 232
 2e8:	33 e0       	ldi	r19, 0x03	; 3
 2ea:	82 9f       	mul	r24, r18
 2ec:	a0 01       	movw	r20, r0
 2ee:	83 9f       	mul	r24, r19
 2f0:	50 0d       	add	r21, r0
 2f2:	92 9f       	mul	r25, r18
 2f4:	50 0d       	add	r21, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	46 0f       	add	r20, r22
 2fa:	57 1f       	adc	r21, r23
 2fc:	8e 2f       	mov	r24, r30
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	9c 01       	movw	r18, r24
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	82 0f       	add	r24, r18
 310:	93 1f       	adc	r25, r19
 312:	84 0f       	add	r24, r20
 314:	95 1f       	adc	r25, r21
 316:	8f 0f       	add	r24, r31
 318:	91 1d       	adc	r25, r1
 31a:	80 5d       	subi	r24, 0xD0	; 208
 31c:	94 41       	sbci	r25, 0x14	; 20
 31e:	90 93 71 00 	sts	0x0071, r25
 322:	80 93 70 00 	sts	0x0070, r24
				uart_puts("ACK\r\n");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	98 d0       	rcall	.+304    	; 0x45c <uart_puts>
 32c:	02 c0       	rjmp	.+4      	; 0x332 <main+0x1e8>
			}
			else
				uart_puts("NACK\r\n");
 32e:	c6 01       	movw	r24, r12
 330:	95 d0       	rcall	.+298    	; 0x45c <uart_puts>
			uart_flush();																						
 332:	bf d0       	rcall	.+382    	; 0x4b2 <uart_flush>
 334:	67 cf       	rjmp	.-306    	; 0x204 <main+0xba>

00000336 <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 34c:	3b b1       	in	r19, 0x0b	; 11
    data = UART0_DATA;
 34e:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 350:	80 91 75 00 	lds	r24, 0x0075
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	8f 71       	andi	r24, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 358:	90 91 74 00 	lds	r25, 0x0074
 35c:	89 17       	cp	r24, r25
 35e:	51 f0       	breq	.+20     	; 0x374 <__vector_11+0x3e>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 360:	93 2f       	mov	r25, r19
 362:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 364:	80 93 75 00 	sts	0x0075, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 368:	e8 e7       	ldi	r30, 0x78	; 120
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	e8 0f       	add	r30, r24
 36e:	f1 1d       	adc	r31, r1
 370:	20 83       	st	Z, r18
 372:	01 c0       	rjmp	.+2      	; 0x376 <__vector_11+0x40>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 374:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 376:	90 93 73 00 	sts	0x0073, r25
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 3a2:	90 91 77 00 	lds	r25, 0x0077
 3a6:	80 91 76 00 	lds	r24, 0x0076
 3aa:	98 17       	cp	r25, r24
 3ac:	69 f0       	breq	.+26     	; 0x3c8 <__vector_12+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 3ae:	80 91 76 00 	lds	r24, 0x0076
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	8f 71       	andi	r24, 0x1F	; 31
        UART_TxTail = tmptail;
 3b6:	80 93 76 00 	sts	0x0076, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 3ba:	e8 e9       	ldi	r30, 0x98	; 152
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	e8 0f       	add	r30, r24
 3c0:	f1 1d       	adc	r31, r1
 3c2:	80 81       	ld	r24, Z
 3c4:	8c b9       	out	0x0c, r24	; 12
 3c6:	01 c0       	rjmp	.+2      	; 0x3ca <__vector_12+0x3a>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 3c8:	55 98       	cbi	0x0a, 5	; 10
    }
}
 3ca:	ff 91       	pop	r31
 3cc:	ef 91       	pop	r30
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 3dc:	10 92 77 00 	sts	0x0077, r1
    UART_TxTail = 0;
 3e0:	10 92 76 00 	sts	0x0076, r1
    UART_RxHead = 0;
 3e4:	10 92 75 00 	sts	0x0075, r1
    UART_RxTail = 0;
 3e8:	10 92 74 00 	sts	0x0074, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 3ec:	99 23       	and	r25, r25
 3ee:	1c f4       	brge	.+6      	; 0x3f6 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 3f0:	22 e0       	ldi	r18, 0x02	; 2
 3f2:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 3f4:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 3f6:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 3f8:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 3fa:	88 e9       	ldi	r24, 0x98	; 152
 3fc:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL )|(3<<UCSZ0);
 3fe:	86 e8       	ldi	r24, 0x86	; 134
 400:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 402:	08 95       	ret

00000404 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 404:	90 91 75 00 	lds	r25, 0x0075
 408:	80 91 74 00 	lds	r24, 0x0074
 40c:	98 17       	cp	r25, r24
 40e:	91 f0       	breq	.+36     	; 0x434 <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 410:	80 91 74 00 	lds	r24, 0x0074
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	8f 71       	andi	r24, 0x1F	; 31
    UART_RxTail = tmptail; 
 418:	80 93 74 00 	sts	0x0074, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];  
 41c:	e8 e7       	ldi	r30, 0x78	; 120
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	e8 0f       	add	r30, r24
 422:	f1 1d       	adc	r31, r1
 424:	20 81       	ld	r18, Z
    return (UART_LastRxError << 8) + data;
 426:	30 91 73 00 	lds	r19, 0x0073
 42a:	93 2f       	mov	r25, r19
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	82 0f       	add	r24, r18
 430:	91 1d       	adc	r25, r1
 432:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	91 e0       	ldi	r25, 0x01	; 1
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];  
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 438:	08 95       	ret

0000043a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 43a:	20 91 77 00 	lds	r18, 0x0077
 43e:	2f 5f       	subi	r18, 0xFF	; 255
 440:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 442:	90 91 76 00 	lds	r25, 0x0076
 446:	29 17       	cp	r18, r25
 448:	e1 f3       	breq	.-8      	; 0x442 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 44a:	e8 e9       	ldi	r30, 0x98	; 152
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	e2 0f       	add	r30, r18
 450:	f1 1d       	adc	r31, r1
 452:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 454:	20 93 77 00 	sts	0x0077, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 458:	55 9a       	sbi	0x0a, 5	; 10

}/* uart_putc */
 45a:	08 95       	ret

0000045c <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	ec 01       	movw	r28, r24
    while (*s) 
 462:	88 81       	ld	r24, Y
 464:	88 23       	and	r24, r24
 466:	29 f0       	breq	.+10     	; 0x472 <__stack+0x13>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
 468:	21 96       	adiw	r28, 0x01	; 1
{
    while (*s) 
      uart_putc(*s++);
 46a:	e7 df       	rcall	.-50     	; 0x43a <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 46c:	89 91       	ld	r24, Y+
 46e:	88 23       	and	r24, r24
 470:	e1 f7       	brne	.-8      	; 0x46a <__stack+0xb>
      uart_putc(*s++);

}/* uart_puts */
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 47e:	fc 01       	movw	r30, r24
 480:	84 91       	lpm	r24, Z
 482:	88 23       	and	r24, r24
 484:	39 f0       	breq	.+14     	; 0x494 <uart_puts_p+0x1c>
 486:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(c);
 488:	d8 df       	rcall	.-80     	; 0x43a <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 48a:	fe 01       	movw	r30, r28
 48c:	21 96       	adiw	r28, 0x01	; 1
 48e:	84 91       	lpm	r24, Z
 490:	88 23       	and	r24, r24
 492:	d1 f7       	brne	.-12     	; 0x488 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 49a:	80 91 75 00 	lds	r24, 0x0075
 49e:	20 91 74 00 	lds	r18, 0x0074
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	4f 96       	adiw	r24, 0x1f	; 31
 4a6:	82 1b       	sub	r24, r18
 4a8:	91 09       	sbc	r25, r1
 4aa:	6f e1       	ldi	r22, 0x1F	; 31
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	0b d0       	rcall	.+22     	; 0x4c6 <__divmodhi4>
}/* uart_available */
 4b0:	08 95       	ret

000004b2 <uart_flush>:
Returns:  None
**************************************************************************/
void uart_flush(void)
{
     unsigned char dummy;
     while ( UART0_STATUS  & (1<<7) ) dummy = UART0_DATA;
 4b2:	5f 9b       	sbis	0x0b, 7	; 11
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <uart_flush+0xa>
 4b6:	8c b1       	in	r24, 0x0c	; 12
 4b8:	5f 99       	sbic	0x0b, 7	; 11
 4ba:	fd cf       	rjmp	.-6      	; 0x4b6 <uart_flush+0x4>
	 UART_RxHead = UART_RxTail = 0; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! moja modyfikacja.
 4bc:	10 92 74 00 	sts	0x0074, r1
 4c0:	10 92 75 00 	sts	0x0075, r1
}/* uart_flush */
 4c4:	08 95       	ret

000004c6 <__divmodhi4>:
 4c6:	97 fb       	bst	r25, 7
 4c8:	09 2e       	mov	r0, r25
 4ca:	07 26       	eor	r0, r23
 4cc:	0a d0       	rcall	.+20     	; 0x4e2 <__divmodhi4_neg1>
 4ce:	77 fd       	sbrc	r23, 7
 4d0:	04 d0       	rcall	.+8      	; 0x4da <__divmodhi4_neg2>
 4d2:	0c d0       	rcall	.+24     	; 0x4ec <__udivmodhi4>
 4d4:	06 d0       	rcall	.+12     	; 0x4e2 <__divmodhi4_neg1>
 4d6:	00 20       	and	r0, r0
 4d8:	1a f4       	brpl	.+6      	; 0x4e0 <__divmodhi4_exit>

000004da <__divmodhi4_neg2>:
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255

000004e0 <__divmodhi4_exit>:
 4e0:	08 95       	ret

000004e2 <__divmodhi4_neg1>:
 4e2:	f6 f7       	brtc	.-4      	; 0x4e0 <__divmodhi4_exit>
 4e4:	90 95       	com	r25
 4e6:	81 95       	neg	r24
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	08 95       	ret

000004ec <__udivmodhi4>:
 4ec:	aa 1b       	sub	r26, r26
 4ee:	bb 1b       	sub	r27, r27
 4f0:	51 e1       	ldi	r21, 0x11	; 17
 4f2:	07 c0       	rjmp	.+14     	; 0x502 <__udivmodhi4_ep>

000004f4 <__udivmodhi4_loop>:
 4f4:	aa 1f       	adc	r26, r26
 4f6:	bb 1f       	adc	r27, r27
 4f8:	a6 17       	cp	r26, r22
 4fa:	b7 07       	cpc	r27, r23
 4fc:	10 f0       	brcs	.+4      	; 0x502 <__udivmodhi4_ep>
 4fe:	a6 1b       	sub	r26, r22
 500:	b7 0b       	sbc	r27, r23

00000502 <__udivmodhi4_ep>:
 502:	88 1f       	adc	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	5a 95       	dec	r21
 508:	a9 f7       	brne	.-22     	; 0x4f4 <__udivmodhi4_loop>
 50a:	80 95       	com	r24
 50c:	90 95       	com	r25
 50e:	bc 01       	movw	r22, r24
 510:	cd 01       	movw	r24, r26
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
